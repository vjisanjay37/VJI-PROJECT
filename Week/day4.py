# -*- coding: utf-8 -*-
"""Day4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TF8TU3AwWzyw6envZEykMzpOZDo5St1N
"""

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]
}
df = pd.DataFrame(data)
print(df)
print(df.isnull().sum())

import pandas as pd
data = {
"Customer": ["Alice", "Bob", "Charlie"],
"Age": [25, 30, 35],
"Amount Spent": [120, 200, 150]
}
df = pd.DataFrame(data)
print(df)
df_cleaned = df.dropna() # Removes rows with missing values
print(df_cleaned)

import pandas as pd

# Define the data
data = {
    "Age": [15, 20, None,25],
    "Marks": [75,None, 45, 98],
    "Attendance": [18, 54, 65,None]
}
df = pd.DataFrame(data)
print("Original DataFrame:")
print(df)
df["Age"].fillna(df["Age"].mean(), inplace=True)
df["Marks"].fillna(df["Marks"].median(), inplace=True)
df["Attendance"].fillna(df["Attendance"].mean(), inplace=True)
print("\nDataFrame after filling missing values:")
print(df)

import pandas as pd

# Define the data
data = {
    "Age": [15, 20, None, 25],  # Included a None value to demonstrate fillna()
    "Marks": [75, None, 45, 98],  # Included a None value
    "Attendance": [18, 54, 65, None],  # Included a None value
    "Passed": ["Yes", "No", None, "Yes"]  # Included a None value
}

# Create the DataFrame
df = pd.DataFrame(data)

# Display the original DataFrame
print("Original DataFrame:")
print(df)

# Fill missing values
df["Age"].fillna(df["Age"].mean(), inplace=True)
df["Marks"].fillna(df["Marks"].median(), inplace=True)
df["Attendance"].fillna(df["Attendance"].mean(), inplace=True)
df["Passed"].fillna(df["Passed"].mode()[0], inplace=True)  # Fix column name

# Display the DataFrame after filling missing values
print("\nDataFrame after filling missing values:")
print(df)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
import pandas as pd

# Define the data
data = {
    "Age": [15, 20, None,25],
    "Marks": [75,None, 45, 98],
    "Attendance": [18, 54, 65,None]
}

# Create the DataFrame
df = pd.DataFrame(data)

# Display the original DataFrame
print("Original DataFrame:")
print(df)
df_scaled = df.copy()
df_scaled[["Marks", "Attendance"]] = scaler.fit_transform(df[["Marks", "Attendance"]])
print(df_scaled)

import pandas as pd

data = {
    "Age": [15, 20, None, 25],
    "Marks": [75, None, 45, 98],
    "Attendance": [18, 54, 65, None],
    "Passed": ["Yes", "No", "No", "Yes"]  # Added categorical column
}

df = pd.DataFrame(data)
print("Original DataFrame:")
print(df)

# Apply one-hot encoding to the "Passed" column
df_encoded = pd.get_dummies(df, columns=["Passed"], drop_first=True)
print("\nEncoded DataFrame:")
print(df_encoded)

import pandas as pd

# Sample data
data = {
    "Age": [15, 20, 25],  # Age values
    "marks": [75, 45, 98],
    "Attendance": [18, 54, 65]
}

# Create DataFrame
df = pd.DataFrame(data)

# Create the Age_Group column using pd.cut
df["Age_Group"] = pd.cut(df["Age"], bins=[0, 18, 21, 24, 100], labels=["Teen", "Young", "Adult", "Senior"])

# Print the DataFrame with Age_Group
print(df)

import pandas as pd
data = {
    "Age": [15, 20, 25],  # Age values
    "Marks": [75, 45, 98],
    "Attendance": [18, 54, 65]
}

df = pd.DataFrame(data)
print(df)
def performance_category(marks):
  if marks >= 85:
    return "High"
  elif marks >= 70:
      return "Medium"
  else:
      return "Low"
df["Performance"] = df["Marks"].apply(performance_category)
print(df)